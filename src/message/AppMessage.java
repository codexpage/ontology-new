package message;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AppMessage'
 * message type.
 */

public class AppMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 11;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 2;

    /** Create a new AppMessage of size 11. */
    public AppMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AppMessage of the given data_length. */
    public AppMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AppMessage with the given data_length
     * and base offset.
     */
    public AppMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AppMessage using the given byte array
     * as backing store.
     */
    public AppMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AppMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public AppMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AppMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AppMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AppMessage embedded in the given message
     * at the given base offset.
     */
    public AppMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AppMessage embedded in the given message
     * at the given base offset and length.
     */
    public AppMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AppMessage> \n";
      try {
        s += "  [nodeId=0x"+Long.toHexString(get_nodeId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dataType=0x"+Long.toHexString(get_dataType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data1=0x"+Long.toHexString(get_data1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data2=0x"+Long.toHexString(get_data2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [count=0x"+Long.toHexString(get_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeId' is signed (false).
     */
    public static boolean isSigned_nodeId() {
        return false;
    }

    /**
     * Return whether the field 'nodeId' is an array (false).
     */
    public static boolean isArray_nodeId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeId'
     */
    public static int offset_nodeId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeId'
     */
    public static int offsetBits_nodeId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeId'
     */
    public int get_nodeId() {
        return (int)getUIntBEElement(offsetBits_nodeId(), 16);
    }

    /**
     * Set the value of the field 'nodeId'
     */
    public void set_nodeId(int value) {
        setUIntBEElement(offsetBits_nodeId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeId'
     */
    public static int size_nodeId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeId'
     */
    public static int sizeBits_nodeId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dataType
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dataType' is signed (false).
     */
    public static boolean isSigned_dataType() {
        return false;
    }

    /**
     * Return whether the field 'dataType' is an array (false).
     */
    public static boolean isArray_dataType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dataType'
     */
    public static int offset_dataType() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dataType'
     */
    public static int offsetBits_dataType() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'dataType'
     */
    public short get_dataType() {
        return (short)getUIntBEElement(offsetBits_dataType(), 8);
    }

    /**
     * Set the value of the field 'dataType'
     */
    public void set_dataType(short value) {
        setUIntBEElement(offsetBits_dataType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dataType'
     */
    public static int size_dataType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dataType'
     */
    public static int sizeBits_dataType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data1
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data1' is signed (false).
     */
    public static boolean isSigned_data1() {
        return false;
    }

    /**
     * Return whether the field 'data1' is an array (false).
     */
    public static boolean isArray_data1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data1'
     */
    public static int offset_data1() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data1'
     */
    public static int offsetBits_data1() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'data1'
     */
    public int get_data1() {
        return (int)getUIntBEElement(offsetBits_data1(), 16);
    }

    /**
     * Set the value of the field 'data1'
     */
    public void set_data1(int value) {
        setUIntBEElement(offsetBits_data1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data1'
     */
    public static int size_data1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data1'
     */
    public static int sizeBits_data1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data2
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data2' is signed (false).
     */
    public static boolean isSigned_data2() {
        return false;
    }

    /**
     * Return whether the field 'data2' is an array (false).
     */
    public static boolean isArray_data2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data2'
     */
    public static int offset_data2() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data2'
     */
    public static int offsetBits_data2() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'data2'
     */
    public int get_data2() {
        return (int)getUIntBEElement(offsetBits_data2(), 16);
    }

    /**
     * Set the value of the field 'data2'
     */
    public void set_data2(int value) {
        setUIntBEElement(offsetBits_data2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data2'
     */
    public static int size_data2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data2'
     */
    public static int sizeBits_data2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: count
    //   Field type: long, unsigned
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'count' is signed (false).
     */
    public static boolean isSigned_count() {
        return false;
    }

    /**
     * Return whether the field 'count' is an array (false).
     */
    public static boolean isArray_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'count'
     */
    public static int offset_count() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'count'
     */
    public static int offsetBits_count() {
        return 56;
    }

    /**
     * Return the value (as a long) of the field 'count'
     */
    public long get_count() {
        return (long)getUIntBEElement(offsetBits_count(), 32);
    }

    /**
     * Set the value of the field 'count'
     */
    public void set_count(long value) {
        setUIntBEElement(offsetBits_count(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'count'
     */
    public static int size_count() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'count'
     */
    public static int sizeBits_count() {
        return 32;
    }

}
